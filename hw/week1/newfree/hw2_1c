#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node* next;
};
struct node*head;//创建头指针
void print(void)//正向打印链表
{
    struct node*temp=head;
    while(temp!=NULL)
    {
        printf("%d ",temp->data);
        temp=temp->next;
    }
    printf("\n");

}
void insert(int data,int n)//实现向链表中任意位置插入节点，data指要插入节点的值，n指节点要插入的位置（第一个节点之前记为第一个位置）
{
    struct node*temp1=(struct node*)malloc(sizeof(struct node));//创建一个指针指向一个节点
    temp1->data=data;
    temp1->next=NULL;
    if(n==1)//向链表的头部插入节点
    {
        temp1->next=head;
        head=temp1;
        return;
    }
    struct node*temp2=head;
    int i=0;
    for(i=0;i<n-2;i++)//遍历链表到第n-1个节点
    {
        temp2=temp2->next;
    }
    temp1->next=temp2->next;//让插入节点能指向第n个节点
    temp2->next=temp1;//让第n-1个节点能指向插入节点
}
void delete(int n)//实现删除第n个节点
{
    struct node*temp1=head;
    if(n==1)//删除第一个节点
    {
        head=temp1->next;
        free(temp1);
        return;
    }
    int i;
    for(i=0;i<n-2;i++)//遍历到第n-1个节点
    {
        temp1=temp1->next;
    }
    struct node*temp2=temp1->next;//创建指向第n个节点的指针
    temp1->next=temp2->next;//让第n-1个节点能指向第n+1个节点
    free(temp2);//释放第n个节点
}
void reverse(void)//实现链表的反转
{
    struct node*prev,*cur,*next;//创建三个指针，分别指向上一个节点，当前节点，下一个节点
    cur=head;
    prev=NULL;
    int i;
    if(cur!=NULL)
    {
        next=cur->next;//让next指向下一个节点，使一次循环后cur可以指向下一个节点
        cur->next=prev;//让当前节点指向上一个节点
        prev=cur;//让prev指向下一个节点
        cur=next;//让cur指向下一个节点
    }
    head=prev;//把链表的尾部变成头部，完成反转
}
int read(int n,int*e)//读取链表中第n个节点的数据
{
    struct node*temp=head;
    int i=1;
    if(temp!=NULL&&i<n)
    {
        temp=temp->next;//指向下一节点
        i++;
    }
    if(temp==NULL)
    return 0;
    else 
    {
        *e=temp->data;//读取数据
        return 1;
    }
}
int find(int x)//在链表中查找元素
{
    struct node*temp=head;
    if(temp!=NULL)//从头遍历链表查找元素
    {
        if(temp->data==x)
        return 1;
        temp=temp->next;
    }
    return 0;
}
int change(int x,int y)//更新链表中的元素
{
    struct node*temp=head;
    if(temp!=NULL)//从头遍历链表查找元素
    {
        if(temp->data==x)
        {
        temp->data=y;//更新元素
        return 1;
        }
        temp=temp->next;
    }
    return 0;
}
int main(void)
{
    head=NULL;
    int m,i;
    int data;
    scanf("%d",&m);//输入要插入节点个数
    for(i=0;i<m;i++)
    {
        scanf("%d",&data);//输入节点的数据
        insert(data,i+1);//插入节点
    }
    print();//打印链表
    int NO,cNO,x,y,e;
    scanf("%d %d",&NO,&cNO);
    scanf("%d %d",&x,&y);
    delete(NO);//删除第NO个节点
    print();
    read(cNO,&e);//读取第cNO个节点的数据
    print();
    find(x);//查找数据x
    print();
    change(x,y);//更新数据x为y
    print();
    reverse();//链表的反转
    print();
    return 0;
    }
